body {
    margin: 0;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
      sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  
  code {
    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
      monospace;
  }

/* ---------  Variables */
$c-theme: #1f93ff;
$c-theme-accent: #949494;
$c-theme-accent-darken: darken($c-theme-accent, 20%);
$c-white: #fff;
$c-black: #000;
$c-bg: #edf1f8;

// Breakpoints
$mq-xxLarge: 100em; // 1600px
$mq-xLarge: 85.9375em; // 1375px
$mq-large: 75em; // 1200px
$mq-mediumLarge: 64em; // 1024px
$mq-medium: 56.25em; // 900px
$mq-mediumSmall: 48em; // 768px
$mq-small: 37.5em; // 600px
$mq-tiny: 30em; // 480px
$mq-base: 20em; // 320px

// Fonts
@import url(https://fonts.googleapis.com/css?family=Roboto&display=swap);

$f-headings: 'Roboto', sans-serif;
$f-body: 'Roboto', sans-serif;

$f-headings: 'Helvetica', sans-serif;
$f-body: 'Helvetica', sans-serif;


/* ---------  Mixins */
@mixin box-shadow {
  -webkit-box-shadow: 0px 3px 5px -2px rgba(0,0,0,0.3);
  -moz-box-shadow: 0px 3px 5px -2px rgba(0,0,0,0.3);
  box-shadow: 0px 3px 5px -2px rgba(0,0,0,0.3);
}

@mixin center($width, $max-width) {
	width: $width;
	max-width: $max-width;
	margin-left: auto;
	margin-right: auto;
}

// =================================
//	Flex
// =================================
// Flexbox Mixins

// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box. 
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
//
// (Placeholder selectors for each type, for those who rather @extend)

@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in. 
//
// Values: row | row-reverse | column | column-reverse
// Default: row
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($value: false) { @include flex-direction($value); }

//----------------------------------------------------------------------

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in. 
//
// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else { 
		-ms-flex-wrap: $value; 
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap> 
// Default: row nowrap
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property

@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#order-property

@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// Default: 0
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property

@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// Default: 1
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid. 
//
// Values: Like "width" 
// Default: auto
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property

@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
//
// http://w3.org/tr/css3-flexbox/#flex-property

@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
//
// http://w3.org/tr/css3-flexbox/#justify-content-property

@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
	// Shorter version:
	@mixin flex-just($value: flex-start) { @include justify-content($value); }

//----------------------------------------------------------------------

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.) 
//
// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}

//----------------------------------

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}

//----------------------------------------------------------------------

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}

// ================
// Flexbox Sticky Footer

@mixin stickyFooter($_x-content, $_x-wrapper: 'body', $_x-ieFix: 'false') {

	////// Description:
	  // - mixin to automatically execute a Flexbox sticky footer
	  ////
	
	////// @param $_x-content
	  // - the element that wraps the main page content and should extend to fill the extra available space on the screen
	  // - should be a STRING containing a CSS selector
	  // - REQUIRED parameter
	  ////
	
	////// @param $_x-wrapper
	  // - the element that wraps the main page content, as well as additional elements like headers and footers
	  // - should be a STRING containing a CSS selector
	  // - defaults to "body", but a different selector can be provided if you have additional wrapper divs within the body
	  ////
	
	////// @param $_x-ieFix
	  // - a BOOLEAN value ("true" or "false")
	  // - addresses an IE bug (it does not support min-height in a vertically oriented Flexbox structure), which causes the sticky footer not to work in IE
	  // - the fix is that min-height is replaced with height ... in most cases this will work fine, but it can cause some undesired side effects with background images
	  ////
	
	////// Instructions:
	  // - This mixin should be declared outside of any selector.
	  // - Look at the content of your page and determine the markup structure. If your header, footer and main content are immediate children of the body, you only need to supply one value: the selector for the main content. If you have additional wrappers, you may need to provide a value for the second parameter as well.
	  // - Test your page in IE and determine whether you need the IE fix. If you do, set the last parameter to "true".
	  ////
	
	  // Safari fix to prevent unclickable elements
	  @if $_x-ieFix == 'true' {
		@at-root body {
		  position: relative;
		}
	  }
	
	  #{$_x-wrapper} {
		@include flexbox();
		@include flex-direction(column);
		@if $_x-ieFix == 'true' {
		  height: 100vh;
		} @else {
		  min-height: 100vh;
		}
		& > * {
		  @include flex-shrink(0);
		}
	  }
	  #{$_x-content} {
		@include flex-grow(1);
	  }
	}
	


/* ---------  Setup */
* {
    box-sizing: border-box;
  }
  
  body {
      margin: 0;
      background: $c-bg; 
  }


  /* ---------  Fonts */
  h1, h2, h3, h4, h5 {
    font-family: $f-headings;
    margin: 0;
  }

  h1 {
    color: $c-white;
    font-size: 2rem;
    font-weight: bold;
    @media screen and (min-width: 576px) {
        font-size: 2.5rem;
    }
  }

  h2 {
      color: $c-theme;
      font-size: 1.5rem;
      @media screen and (min-width: 576px) {
        font-size: 1.875rem;
      }
  }

  h3 {
      font-weight: normal;
      font-size: 1.2rem;
      @media screen and (min-width: 767px) {
        font-size: 1.17rem;
      }
  }

  h4 {
    font-weight: normal;
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 3px;
}

  h5 {
    font-size: .8rem;
    font-weight: bold;
    font-family: $f-headings;
    margin: 0;
  }

  h6 {
    font-size: .7rem;
    font-weight: bold;
    font-family: $f-headings;
    text-transform: uppercase;
    margin: 0;
  }

  strong {
    color: $c-black;
  }

  p, ul, li, a, label, input[type="text"],
  textarea[type="text"], input[type="text"]::placeholder, textarea[type="text"]::placeholder, button[type="submit"] {
    font-family: $f-body;
    margin: 0;
    color: #777;
  }

  ul {
      list-style-type: none;
      padding: 0;
  }

  a {
      text-decoration: none;
      transition: .4s all;
      &:hover, &:active {
        color: lighten($c-theme, 10%);
        text-decoration: none;
    }
  }

  .modal-dialog {
	  @include center(90%, $mq-mediumLarge);
	.modal-content {
		padding: 1em;
	}
  }

  // ----- Layout


/* ----- Sticky Footer */
// .react-body {
//   display: flex;
//   flex-direction: column;
//   height: 100vh;
//   .react-main {
//     flex: 1 0 auto;
//     min-height: auto;
//   }
// }
  